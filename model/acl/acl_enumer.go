// Code generated by "enumer -type=ACL -json -transform=snake"; DO NOT EDIT.

//
package acl

import (
	"encoding/json"
	"fmt"
)

const _ACLName = "catbulkclustersearchremotecreatecountscriptsdeletedocsourcefield_capscloseanalyzeexistsgettemplateexplainindicesaliasaliasesdelete_by_querycacheindexmappingflushforcemergeupgradesettingsopenrecoverymappingsrolloverrefreshsegmentsshrinksplitshard_storesstatsingestvalidatemsearchmgetnodesmtermvectorsreindexupdate_by_queryrenderrank_evalsearch_shardssnapshottaskstermvectorsupdatereactivesearchreactivesearch_validate"

var _ACLIndex = [...]uint16{0, 3, 7, 14, 20, 26, 32, 37, 44, 50, 53, 59, 69, 74, 81, 87, 90, 98, 105, 112, 117, 124, 139, 144, 149, 156, 161, 171, 178, 186, 190, 198, 206, 214, 221, 229, 235, 240, 252, 257, 263, 271, 278, 282, 287, 299, 306, 321, 327, 336, 349, 357, 362, 373, 379, 393, 416}

func (i ACL) String() string {
	if i < 0 || i >= ACL(len(_ACLIndex)-1) {
		return fmt.Sprintf("ACL(%d)", i)
	}
	return _ACLName[_ACLIndex[i]:_ACLIndex[i+1]]
}

var _ACLValues = []ACL{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55}

var _ACLNameToValueMap = map[string]ACL{
	_ACLName[0:3]:     0,
	_ACLName[3:7]:     1,
	_ACLName[7:14]:    2,
	_ACLName[14:20]:   3,
	_ACLName[20:26]:   4,
	_ACLName[26:32]:   5,
	_ACLName[32:37]:   6,
	_ACLName[37:44]:   7,
	_ACLName[44:50]:   8,
	_ACLName[50:53]:   9,
	_ACLName[53:59]:   10,
	_ACLName[59:69]:   11,
	_ACLName[69:74]:   12,
	_ACLName[74:81]:   13,
	_ACLName[81:87]:   14,
	_ACLName[87:90]:   15,
	_ACLName[90:98]:   16,
	_ACLName[98:105]:  17,
	_ACLName[105:112]: 18,
	_ACLName[112:117]: 19,
	_ACLName[117:124]: 20,
	_ACLName[124:139]: 21,
	_ACLName[139:144]: 22,
	_ACLName[144:149]: 23,
	_ACLName[149:156]: 24,
	_ACLName[156:161]: 25,
	_ACLName[161:171]: 26,
	_ACLName[171:178]: 27,
	_ACLName[178:186]: 28,
	_ACLName[186:190]: 29,
	_ACLName[190:198]: 30,
	_ACLName[198:206]: 31,
	_ACLName[206:214]: 32,
	_ACLName[214:221]: 33,
	_ACLName[221:229]: 34,
	_ACLName[229:235]: 35,
	_ACLName[235:240]: 36,
	_ACLName[240:252]: 37,
	_ACLName[252:257]: 38,
	_ACLName[257:263]: 39,
	_ACLName[263:271]: 40,
	_ACLName[271:278]: 41,
	_ACLName[278:282]: 42,
	_ACLName[282:287]: 43,
	_ACLName[287:299]: 44,
	_ACLName[299:306]: 45,
	_ACLName[306:321]: 46,
	_ACLName[321:327]: 47,
	_ACLName[327:336]: 48,
	_ACLName[336:349]: 49,
	_ACLName[349:357]: 50,
	_ACLName[357:362]: 51,
	_ACLName[362:373]: 52,
	_ACLName[373:379]: 53,
	_ACLName[379:393]: 54,
	_ACLName[393:416]: 55,
}

// FromString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FromString(s string) (ACL, error) {
	if val, ok := _ACLNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ACL values", s)
}

// ACLValues returns all values of the enum
func Values() []ACL {
	return _ACLValues
}

// IsAnACL returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ACL) IsAnACL() bool {
	for _, v := range _ACLValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ACL
func (i ACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ACL
func (i *ACL) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ACL should be a string, got %s", data)
	}

	var err error
	*i, err = FromString(s)
	return err
}
